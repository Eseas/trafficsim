Automatically generated by Mendeley Desktop 1.19
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{ERICSSON1,
author = {Erricsson},
file = {:home/kazimieras/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Erricsson - 2014 - Inside Erlang – creator Joe Armstrong tells his story.html:html},
title = {{Inside Erlang – creator Joe Armstrong tells his story}},
url = {https://www.ericsson.com/en/news/2014/12/inside-erlang--creator-joe-armstrong-tells-his-story},
year = {2014}
}
@article{EIP2008,
abstract = {As such, the are assumed to be rather `dumb', whereas the contain all routing is such a common occurrence in integration that},
author = {Hohpe, Gregor and Woolf, Bobby},
doi = {10.1016/S0197-4572(08)00311-X},
file = {:home/kazimieras/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hohpe, Woolf - 2008 - Enterprise Integration Patterns.pdf:pdf},
isbn = {0321200683},
issn = {01974572},
journal = {Geriatric Nursing},
number = {5},
pages = {287--288},
title = {{Enterprise Integration Patterns}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S019745720800311X},
volume = {29},
year = {2008}
}
@misc{XPColl,
author = {Wells, Don},
title = {{XP: Collective Ownership}},
url = {http://www.extremeprogramming.org/rules/collective.html},
urldate = {2018-01-10},
year = {1999}
}
@misc{ERLTut,
annote = {NULL},
title = {{EUnited Nations Council | Learn You Some Erlang for Great Good!}},
url = {http://learnyousomeerlang.com/content http://learnyousomeerlang.com/eunit},
urldate = {2017-03-12}
}
@article{Zimmermann2016,
abstract = {Department editors Olaf Zimmerman and Cesare Pautasso interview Gregor Hohpe and Bobby Woolf, authors of Enterprise Integration Patterns. They discuss the book's impact, pattern language design, message-oriented middleware, integration technology's evolution, and the authors' future plans.},
author = {Zimmermann, Olaf and Pautasso, Cesare and Hohpe, Gregor and Woolf, Bobby},
doi = {10.1109/MS.2016.11},
issn = {07407459},
journal = {IEEE Software},
number = {1},
pages = {13--19},
title = {{A decade of enterprise integration patterns: A conversation with the authors}},
volume = {33},
year = {2016}
}
@book{EIP2003,
annote = {NULL},
author = {Hohpe, Gregor and Bobby, Woolf},
doi = {10.1109/MAES.2010.5638796},
file = {:home/kazimieras/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hohpe, Bobby - 2003 - Enterprice Integration Patterns.pdf:pdf},
isbn = {0321200683},
issn = {0885-8985},
pages = {574},
publisher = {Addison-Wesley},
title = {{Enterprice Integration Patterns}},
year = {2003}
}
@misc{ApacheCamel,
author = {{The Apache Software Foundation}},
title = {{Enterprise Integration Patterns}},
url = {http://camel.apache.org/enterprise-integration-patterns.html},
urldate = {2017-10-16}
}
@misc{Maslow,
author = {McLeod, Saul},
title = {{Maslow's Hierarchy of Needs}},
url = {https://www.simplypsychology.org/maslow.html},
urldate = {2018-01-10}
}
@misc{ErlSupVis,
author = {Ericsson, AB},
title = {{Erlang supervisor}},
url = {http://erlang.org/doc/man/supervisor.html},
urldate = {2018-03-09}
}
@misc{FuncPL,
isbn = {9780124104099},
title = {{Programming Languages}},
url = {https://en.wikipedia.org/wiki/List{\_}of{\_}programming{\_}languages{\_}by{\_}type{\#}Impure},
urldate = {2018-05-15}
}
@misc{LearnYouSomeErlang,
annote = {NULL},
author = {Trottier-Hebert, Frederic},
title = {{Starting Out (for real) | Learn You Some Erlang for Great Good!}},
url = {http://learnyousomeerlang.com/starting-out-for-real},
urldate = {2017-10-13},
year = {2017}
}
@misc{OTPGenSer,
author = {Erricsson},
title = {{Generic server behavior}},
url = {http://erlang.org/doc/design{\_}principles/gen{\_}server{\_}concepts.html},
urldate = {2017-12-04}
}
@misc{TiobeIdx,
author = {Tiobe},
title = {{Tiobe index}},
url = {https://www.tiobe.com/tiobe-index/},
urldate = {2018-05-19}
}
@misc{ErlConc,
author = {AB, Ericsson},
title = {{Erlang concurrent programming}},
url = {http://erlang.org/doc/getting{\_}started/conc{\_}prog.html},
urldate = {2018-04-22}
}
@article{Letuchy2009,
author = {Letuchy, Eugene},
file = {:home/kazimieras/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Letuchy - 2009 - Erlang at Facebook.pdf:pdf},
journal = {Architecture},
pages = {40},
title = {{Erlang at Facebook}},
url = {https://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf},
year = {2009}
}
@misc{FBENG,
author = {Piro, Chris},
file = {:home/kazimieras/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Piro - 2009 - Chat Stability and Scalability.html:html},
title = {{Chat Stability and Scalability}},
url = {https://www.facebook.com/notes/facebook-engineering/chat-stability-and-scalability/51412338919/},
year = {2009}
}
@misc{ErlangORG,
author = {Erlang/OTP unit, Ericsson},
title = {erlang.org},
url = {https://www.erlang.org/}
}
@book{Ibsen2010,
abstract = {Apache Camel is a Java framework that lets you implement the standard enterprise integration patterns in a few lines of code. With a concise but sophisticated DSL you snap integration logic into your app, Lego-style, using Java, XML, or Scala. Camel supports over 80 common transports such as HTTP, REST, JMS, and Web Services. Camel in Action is a Camel tutorial full of small examples showing how to work with the integration patterns. It starts with core concepts like sending, receiving, routing, and transforming data. It then shows you the entire lifecycle and goes in depth on how to test, deal with errors, scale, deploy, and even monitor your app— details you can find only in the Camel code itself. Written by the developers of Camel, this book distills their experience and practical insights so that you can tackle integration tasks like a pro. Purchase of the print book comes with an offer of a free PDF, ePub, and Kindle eBook from Manning. Also available is all code from the book. What's Inside Valuable examples in Java and XML Explanations of complex patterns Error handling, testing, deploying, managing, and running Camel Accessible to beginners, useful to experts},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Ibsen, C and Anstey, J},
booktitle = {Chemistry {\&} biodiversity},
doi = {10.1017/CBO9781107415324.004},
eprint = {arXiv:1011.1669v3},
isbn = {978-1935182368},
issn = {1098-6596},
keywords = {Camel},
number = {11},
pages = {552},
pmid = {25246403},
title = {{Camel in Action}},
url = {http://dl.acm.org/citation.cfm?id=1965487},
volume = {1},
year = {2010}
}
@misc{GoogTreErl,
author = {Google},
title = {{Google Trends Erlang}},
url = {https://trends.google.com/trends/explore?date=all{\&}q=erlang},
urldate = {2018-05-19}
}
@misc{DrawIO,
author = {{JGraph Ltd}},
title = {draw.io},
url = {https://www.draw.io/}
}
@misc{JamesShore,
author = {Shore, James},
title = {{The Art of Agile Development: Collective Code Ownership}},
url = {http://www.jamesshore.com/Agile-Book/collective{\_}code{\_}ownership.html},
urldate = {2018-01-10},
year = {2010}
}
@misc{PatMatch,
author = {Erricsson},
title = {{PatternMatching}},
url = {http://erlang.org/doc/reference{\_}manual/},
urldate = {2017-10-08}
}
@article{ArmErl,
author = {Armstrong, Joe},
journal = {Communications of the ACM},
pages = {68--75},
title = {{Erlang}},
url = {https://cacm.acm.org/magazines/2010/9/98014-erlang/fulltext},
year = {2010}
}
@article{Bailey2009,
abstract = {Derick outlines how to achieve the benefits of low coupling, high cohesion, and strong encapsulation. He also shows how the five S.O.L.I.D. design principles can get you there.Most professional software developers understand the academic definitions of coupling, cohesion, and encapsulation.However, many developers do not understand how to achieve the benefits of low coupling, high cohesion and strong encapsulation, as outlined in this article. Fortunately, others have created stepping stones that lead to these goals, resulting in software that is easier to read, easier to understand and easier to change. In this article series, I will define three of the primary object-oriented principles and show how to reach them through the five S.O.L.I.D. design principles.},
author = {Bailey, Derick},
journal = {CODE Magazine, 2010 Jan/Feb},
keywords = {Agile Development,Architecture,C{\#},Design Patterns,Development Process,Frameworks,Object Oriented Development,Patterns,Testing and Quality Control},
title = {{S.O.L.I.D. Software Development, One Step at a Time}},
url = {http://www.codemag.com/article/1001061},
year = {2009}
}
@misc{CollOwn1,
author = {{Alliance Agile}},
keywords = {James Shore},
title = {{Collective Ownership}},
url = {https://www.agilealliance.org/glossary/collective-ownership/{\#}q={~}(filters{~}(postType{~}({~}'page{~}'post{~}'aa{\_}book{~}'aa{\_}event{\_}session{~}'aa{\_}experience{\_}report{~}'aa{\_}glossary{~}'aa{\_}research{\_}paper{~}'aa{\_}video){~}tags{~}({~}'collective*20ownership)){~}searchTerm{~}'{~}sort{~}false{~}sortDirec},
urldate = {2018-01-10},
year = {2010}
}
